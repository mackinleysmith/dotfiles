set nocp
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#rc(expand('~/dotfiles/vim/.vim.titanium/bundle'))

Bundle 'tpope/vim-endwise'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-surround'
Bundle 'tpope/timl'
Bundle 'tpope/vim-obsession'
Bundle 'tpope/vim-repeat'
Bundle 'kchmck/vim-coffee-script'
Bundle 'kien/ctrlp.vim'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/syntastic'
Bundle 'terryma/vim-multiple-cursors'
Bundle 'thoughtbot/vim-rspec'
Bundle 'tomtom/tcomment_vim'
Bundle 'Valloric/YouCompleteMe'
Bundle 'smit1625/tslime.vim'
Bundle 'pekepeke/titanium-vim'
Bundle 'mbadran/headlights'
Bundle 'lyxell/pride.vim'

colorscheme pride

set shell=/bin/bash
set tags=./tags
set backspace=indent,eol,start
set expandtab
set tabstop=2 shiftwidth=2 softtabstop=2
set number
set laststatus=2
set ruler
set ttyfast
set mouse=a
set ttymouse=sgr
set colorcolumn=80
set incsearch
set hlsearch

let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=0
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=5

let &colorcolumn=join(range(81,999),",")
autocmd VimEnter,Colorscheme * :hi ColorColumn ctermbg=233

let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"
" upon hitting escape to change modes,
" send successive move-left and move-right
" commands to immediately redraw the cursor
" inoremap <special> <Esc> <Esc>hlll
" don't blink the cursor
set guicursor+=i:blinkwait0

" let g:rails_statusline = 1

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

" Leader key timeout
set tm=2000

" Allow the normal use of "," by pressing it twice
noremap ,, ,

" Disable highlighting on Enter
nnoremap <silent> <CR> :nohlsearch<CR><CR>

function! Interrupt_and_Send_to_Tmux(command)
  :wall
  call Send_keys_to_Tmux("C-c")
  call Send_to_Tmux(a:command)
endfunction
function! Interrupt_and_Send_to_Tmux_with_Preceding_Keys(keys, command)
  :wall
  call Send_keys_to_Tmux("C-a")
  call Send_keys_to_Tmux(a:keys)
  call Interrupt_and_Send_to_Tmux(a:command)
endfunction
function! Interrupt_and_Send_to_Tmux_Pane(pane, command)
  :wall
  call Send_keys_to_Tmux("C-a")
  call Send_keys_to_Tmux("q")
  call Send_keys_to_Tmux(a:pane)
  call Interrupt_and_Send_to_Tmux(a:command)
endfunction

function! SetRspecCommand()
  let g:rspec_command = 'call Interrupt_and_Send_to_Tmux("' . g:actual_rspec_command . '\n")'
endfunction
function! RunWithRange(fn) range
  if v:count > 1
    let a:backup_rspec_command = g:actual_rspec_command
    let g:actual_rspec_command = 'for i in (seq ' . v:count . '); ' . g:actual_rspec_command . '; end'
    call SetRspecCommand()
  endif
  call function(a:fn)()
  if v:count > 1
    let g:actual_rspec_command = a:backup_rspec_command
    call SetRspecCommand()
  endif
endfunction
let g:actual_rspec_command = 'spring rspec {spec}'
call SetRspecCommand()
map <Leader>t :call RunWithRange("RunCurrentSpecFile")<CR>
map <Leader>s :call RunWithRange("RunNearestSpec")<CR>
map <Leader>l :call RunWithRange("RunLastSpec")<CR>
map <Leader>a :call RunWithRange("RunAllSpecs")<CR>
vmap <C-c><C-c> <Plug>SendSelectionToTmux
nmap <C-c><C-c> <Plug>NormalModeSendToTmux
nmap <C-c>r <Plug>SetTmuxVars
map <Leader>m :Tmux<Space>

" Auto Paste {{{
let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

" NERDTree {{{

" Close nerdtree after a file is selected
let NERDTreeQuitOnOpen = 1

function! IsNERDTreeOpen()
  return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
endfunction

function! ToggleFindNerd()
  if IsNERDTreeOpen()
    exec ':NERDTreeToggle'
  else
    exec ':NERDTreeFind'
  endif
endfunction

" If nerd tree is closed, find current file, if open, close it
nmap <silent> <leader>f <ESC>:call ToggleFindNerd()<CR>
nmap <silent> <leader>F <ESC>:NERDTreeToggle<CR>

let g:NERDTreeMapHelp = '<F1>'
let g:NERDTreeMapOpenSplit = '<C-x>'
let g:NERDTreeMapOpenVSplit = '<C-v>'

" Ctrl-P with Matcher
let g:path_to_matcher = "/usr/local/bin/matcher"

let g:ctrlp_user_command = ['.git/', 'cd %s && git ls-files . -co --exclude-standard']

let g:ctrlp_match_func = { 'match': 'GoodMatch' }

function! GoodMatch(items, str, limit, mmode, ispath, crfile, regex)

  " Create a cache file if not yet exists
  let cachefile = ctrlp#utils#cachedir().'/matcher.cache'
  if !( filereadable(cachefile) && a:items == readfile(cachefile) )
    call writefile(a:items, cachefile)
  endif
  if !filereadable(cachefile)
    return []
  endif

  " a:mmode is currently ignored. In the future, we should probably do
  " something about that. the matcher behaves like "full-line".
  let cmd = g:path_to_matcher.' --limit '.a:limit.' --manifest '.cachefile.' '
  if !( exists('g:ctrlp_dotfiles') && g:ctrlp_dotfiles )
    let cmd = cmd.'--no-dotfiles '
  endif
  let cmd = cmd.a:str

  return split(system(cmd), "\n")

endfunction

" Syntastic
syntax on
filetype on
filetype indent on
filetype plugin on
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*
" hi StatusLine ctermbg=White ctermfg=0

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Tell vim to remember certain things when we exit
"  '10  :  marks will be remembered for up to 10 previously edited files
"  "100 :  will save up to 100 lines for each register
"  :20  :  up to 20 lines of command-line history will be remembered
"  %    :  saves and restores the buffer list
"  n... :  where to save the viminfo files
set viminfo='10,\"100,:20,%,n~/.viminfo
" Restore last position on open
function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction
augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END

" Headlights setup
let g:headlights_run_on_startup = 1
let g:headlights_use_plugin_menu = 1
let g:headlights_smart_menus = 1
if !has("gui_running")
  :source $VIMRUNTIME/menu.vim
  :set wildmenu
  :set cpoptions-=<
  :set wildcharm=<C-Z>
  :map <F4> :emenu <C-Z>
endif

function! s:ExecuteInShell(command)
  set shell=/usr/local/bin/fish
  setlocal autoread
  let command = join(map(split(a:command), 'expand(v:val)'))
  let winnr = bufwinnr('^' . command . '$')
  silent! execute  winnr < 0 ? 'botright new ' . fnameescape(command) : winnr . 'wincmd w'
  setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile nowrap number
  echo 'Execute ' . command . '...'
  silent! execute 'silent %!'. command
  silent! execute 'resize ' . line('$')
  silent! redraw
  silent! execute 'au BufUnload <buffer> execute bufwinnr(' . bufnr('#') . ') . ''wincmd w'''
  silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . command . ''')<CR>'
  echo 'Shell command ' . command . ' executed.'
  set shell=/bin/bash
  setlocal noautoread
endfunction
" command! -complete=shellcmd -nargs=+ Shell call s:ExecuteInShell(<q-args>)
" map <Leader>cb :call <SID>ExecuteInShell('rvm use default; ./compile_app.rb compile')<CR>
" map <Leader>cd :call <SID>ExecuteInShell('rvm use default; ./compile_app.rb deploy')<CR>

function! Deploy_to_iPad()
  call Interrupt_and_Send_to_Tmux_Pane(0, "platinum deploy -p ios\n")
endfunction
function! Deploy_to_Xcode()
  call Interrupt_and_Send_to_Tmux_Pane(1, "platinum deploy -p ios -T xcode\n")
endfunction
function! Deploy_to_Simulator()
  call Interrupt_and_Send_to_Tmux_Pane(1, "platinum deploy -p ios -T simulator\n")
endfunction
function! Deploy_to_Testfairy()
  call Interrupt_and_Send_to_Tmux_Pane(0, "platinum deploy -p ios -T dist-adhoc\n")
endfunction
function! Deploy_to_All()
  call Deploy_to_iPad()
  call Deploy_to_Simulator()
endfunction

map <Leader>b :call Interrupt_and_Send_to_Tmux("platinum compile\n")<CR>
map <Leader>dd :call Interrupt_and_Send_to_Tmux("platinum deploy\n")<CR>
map <Leader>di :call Deploy_to_iPad()<CR>
map <Leader>dx :call Deploy_to_Xcode()<CR>
map <Leader>ds :call Deploy_to_Simulator()<CR>
map <Leader>dp :call Deploy_to_Testfairy()<CR>
map <Leader>da :call Deploy_to_All()<CR>
